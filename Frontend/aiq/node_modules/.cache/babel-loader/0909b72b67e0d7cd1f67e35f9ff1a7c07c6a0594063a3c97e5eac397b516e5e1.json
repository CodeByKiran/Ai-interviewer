{"ast":null,"code":"var _jsxFileName = \"C:\\\\AIQ_workspace\\\\aiq\\\\src\\\\pages\\\\Interview.js\",\n  _s = $RefreshSig$();\n// InterviewPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Interview = () => {\n  _s();\n  const {\n    subject\n  } = useParams();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await axios.post(`https://asia-south1-language.googleapis.com/v1/models/text-bison-001:generateText`, {\n          prompt: `Generate interview questions for ${subject}.`,\n          maxOutputTokens: 150,\n          temperature: 0.9,\n          candidateCount: 10\n        }, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `AIzaSyAl145jrtDVH8rmpnGtWcx1vfOZfW9C2mo`\n          }\n        });\n        const aiQuestions = response.data.candidates.map(candidate => candidate.output.trim());\n        setQuestions(aiQuestions);\n      } catch (err) {\n        setError('Failed to load questions. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, [subject]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Interview for \", subject.toUpperCase()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'left',\n        maxWidth: '600px',\n        margin: '0 auto'\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) : questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [index + 1, \". \", question]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Interview, \"j0/H6DBEBfIFh0wdr9CUdp2t9Z8=\", false, function () {\n  return [useParams];\n});\n_c = Interview;\nexport default Interview;\nvar _c;\n$RefreshReg$(_c, \"Interview\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","Interview","_s","subject","questions","setQuestions","loading","setLoading","error","setError","fetchQuestions","response","post","prompt","maxOutputTokens","temperature","candidateCount","headers","aiQuestions","data","candidates","map","candidate","output","trim","err","style","padding","textAlign","children","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","margin","question","index","_c","$RefreshReg$"],"sources":["C:/AIQ_workspace/aiq/src/pages/Interview.js"],"sourcesContent":["// InterviewPage.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst Interview = () => {\r\n  const { subject } = useParams();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await axios.post(\r\n          `https://asia-south1-language.googleapis.com/v1/models/text-bison-001:generateText`, \r\n          {\r\n            prompt: `Generate interview questions for ${subject}.`,\r\n            maxOutputTokens: 150,\r\n            temperature: 0.9,  \r\n            candidateCount: 10 \r\n          },\r\n          {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `AIzaSyAl145jrtDVH8rmpnGtWcx1vfOZfW9C2mo`, \r\n            },\r\n          }\r\n        );\r\n\r\n        const aiQuestions = response.data.candidates.map(candidate => candidate.output.trim());\r\n        setQuestions(aiQuestions);\r\n      } catch (err) {\r\n        setError('Failed to load questions. Please try again later.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, [subject]);\r\n\r\n  return (\r\n    <div style={{ padding: '20px', textAlign: 'center' }}>\r\n      <h1>Interview for {subject.toUpperCase()}</h1>\r\n      <div style={{ textAlign: 'left', maxWidth: '600px', margin: '0 auto' }}>\r\n        {loading ? (\r\n          <p>Loading questions...</p>\r\n        ) : error ? (\r\n          <p>{error}</p>\r\n        ) : (\r\n          questions.map((question, index) => (\r\n            <p key={index}>{index + 1}. {question}</p>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Interview;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAQ,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC/B,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAC/B,mFAAmF,EACnF;UACEC,MAAM,EAAE,oCAAoCV,OAAO,GAAG;UACtDW,eAAe,EAAE,GAAG;UACpBC,WAAW,EAAE,GAAG;UAChBC,cAAc,EAAE;QAClB,CAAC,EACD;UACEC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE;UACnB;QACF,CACF,CAAC;QAED,MAAMC,WAAW,GAAGP,QAAQ,CAACQ,IAAI,CAACC,UAAU,CAACC,GAAG,CAACC,SAAS,IAAIA,SAAS,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;QACtFnB,YAAY,CAACa,WAAW,CAAC;MAC3B,CAAC,CAAC,OAAOO,GAAG,EAAE;QACZhB,QAAQ,CAAC,mDAAmD,CAAC;MAC/D,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACP,OAAO,CAAC,CAAC;EAEb,oBACEH,OAAA;IAAK0B,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBACnD7B,OAAA;MAAA6B,QAAA,GAAI,gBAAc,EAAC1B,OAAO,CAAC2B,WAAW,CAAC,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC9ClC,OAAA;MAAK0B,KAAK,EAAE;QAAEE,SAAS,EAAE,MAAM;QAAEO,QAAQ,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAS,CAAE;MAAAP,QAAA,EACpEvB,OAAO,gBACNN,OAAA;QAAA6B,QAAA,EAAG;MAAoB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GACzB1B,KAAK,gBACPR,OAAA;QAAA6B,QAAA,EAAIrB;MAAK;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,GAEd9B,SAAS,CAACiB,GAAG,CAAC,CAACgB,QAAQ,EAAEC,KAAK,kBAC5BtC,OAAA;QAAA6B,QAAA,GAAgBS,KAAK,GAAG,CAAC,EAAC,IAAE,EAACD,QAAQ;MAAA,GAA7BC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA4B,CAC1C;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChC,EAAA,CArDID,SAAS;EAAA,QACOJ,SAAS;AAAA;AAAA0C,EAAA,GADzBtC,SAAS;AAuDf,eAAeA,SAAS;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}